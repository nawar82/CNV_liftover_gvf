import os
import vcfpy
import subprocess
import argparse

"""
Liftover CNV VCF Files from hg38 to hg19 and Convert to GVF

This script automates the liftover process for Copy Number Variation (CNV) VCF files generated
by GATK gCNV, converting their genomic coordinates from hg38 to hg19. It also transforms the
VCF data into GVF format.

### Features:
- Reads a list of VCF file paths from an input text file.
- Performs liftover of CNV regions using the UCSC liftOver tool.
- Updates CNV IDs and the INFO field (`END` attribute) to reflect hg19 coordinates.
- Generates output files automatically with `_hg19.vcf` and `_hg19.gvf` suffixes.
- Skips missing files and provides warnings.

### Dependencies:
- Python libraries: `vcfpy`, `argparse`, `subprocess`
- External tools: UCSC `liftOver`
- Required files:
    - UCSC chain file for hg38 to hg19 conversion (`hg38ToHg19.over.chain.gz`)
    - Valid CNV VCF files in hg38 format generated by gCNV tool

### Usage:
1. Prepare a text file (e.g., `file_list.txt`) listing the paths to VCF files, one per line:
2. Run the script:
```bash
python Liftover_and_gvf.py -i file_list.txt

Developed by Nawar Dalila
"""
# Get the directory of the script
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Define relative paths
LIFTOVER_BIN = os.path.join(SCRIPT_DIR, "helper", "liftOver")
CHAIN_FILE = os.path.join(SCRIPT_DIR, "helper", "hg38ToHg19.over.chain.gz")
RESULTS_DIR = os.path.join(SCRIPT_DIR, "..", "test_data", "results")
TEMP_DIR = os.path.join(SCRIPT_DIR, "..", "test_data", "temp")

# Ensure results directory exists
os.makedirs(RESULTS_DIR, exist_ok=True)
os.makedirs(TEMP_DIR, exist_ok=True)

def liftover_position(chrom, pos):
    """Lifts over a genomic position using UCSC liftOver tool."""
    input_file = os.path.join(TEMP_DIR, "tmp_liftover_input.bed")
    output_file = os.path.join(TEMP_DIR, "tmp_liftover_output.bed")
    unlifted_file = os.path.join(TEMP_DIR, "tmp_unlifted.bed")

    with open(input_file, "w") as f:
        f.write(f"{chrom}\t{pos-1}\t{pos}\n")

    cmd = [LIFTOVER_BIN, input_file, CHAIN_FILE, output_file, unlifted_file]
    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    try:
        with open(output_file) as f:
            for line in f:
                tokens = line.strip().split("\t")
                return tokens[0], int(tokens[1]) + 1
    except FileNotFoundError:
        return None, None

def write_gvf_header(output_gvf):
    """Writes the GVF file header."""
    with open(output_gvf, "w") as gvf_out:
        gvf_out.write("##gff-version 3\n")
        gvf_out.write("##gvf-version 1.10\n")
        gvf_out.write("##species Homo sapiens\n")
        gvf_out.write("##genome-build hg19\n")
        gvf_out.write("##source GATK\n")
        gvf_out.write("##attribute-definition ID Unique identifier for the variant\n")
        gvf_out.write("##attribute-definition Reference_seq The reference sequence\n")
        gvf_out.write("#seqid\tsource\ttype\tstart\tend\tscore\tstrand\tphase\tattributes\n")

def process_vcf(input_vcf, output_vcf, output_gvf):
    """Reads CNV VCF, performs liftover, and converts to GVF."""
    write_gvf_header(output_gvf)

    reader = vcfpy.Reader.from_path(input_vcf)
    header = reader.header
    writer = vcfpy.Writer.from_path(output_vcf, header)

    with open(output_gvf, "a") as gvf_out:
        for record in reader:
            chrom = record.CHROM
            start_hg38 = record.POS
            id_field = record.ID[0] if record.ID else ""

            if id_field.startswith("CNV_"):
                _, chrom_str, start_str, end_str = id_field.split("_")
                start_pos = int(start_str)
                end_pos = int(end_str)
            else:
                start_pos = start_hg38
                end_pos = start_hg38

            chrom_hg19, start_hg19 = liftover_position(chrom, start_hg38)
            _, start_liftover = liftover_position(chrom, start_pos)
            _, end_liftover = liftover_position(chrom, end_pos)

            if None in (chrom_hg19, start_hg19, start_liftover, end_liftover):
                continue

            record.CHROM = chrom_hg19
            record.POS = start_hg19
            record.ID = [f"CNV_{chrom_hg19}_{start_liftover}_{end_liftover}"]

            if "END" in record.INFO:
                record.INFO["END"] = end_liftover

            writer.write_record(record)

            source = "GATK"
            variant_type = record.ALT[0].value if record.ALT else "."
            score = record.QUAL if record.QUAL is not None else "."
            strand = "."
            phase = "."
            reference_seq = record.REF
            id_value = f"CNV_{chrom_hg19}_{start_liftover}_{end_liftover}"

            attributes = f"ID={id_value};Reference_seq={reference_seq}"
            gvf_out.write(f"{chrom_hg19}\t{source}\t{variant_type}\t{start_liftover}\t{end_liftover}\t{score}\t{strand}\t{phase}\t{attributes}\n")

    writer.close()

# Command-line argument parsing
parser = argparse.ArgumentParser(description="Liftover CNV VCF from hg38 to hg19 and convert to GVF")
parser.add_argument("-i", "--input", required=True, help="Path to file containing list of CNV VCF files generated by gCNV tool from GATK")
args = parser.parse_args()

# Read input file list
with open(args.input, "r") as f:
    vcf_files = [line.strip() for line in f if line.strip()]

# Process each VCF file
for vcf_file in vcf_files:
    if not os.path.exists(vcf_file):
        print(f"Warning: {vcf_file} not found, skipping...")
        continue

    base_name = os.path.splitext(os.path.basename(vcf_file))[0]
    output_vcf = os.path.join(RESULTS_DIR, f"{base_name}_hg19.vcf")
    output_gvf = os.path.join(RESULTS_DIR, f"{base_name}_hg19.gvf")

    print(f"Processing {vcf_file} -> {output_vcf}, {output_gvf}")
    process_vcf(vcf_file, output_vcf, output_gvf)

print("Processing complete!")
